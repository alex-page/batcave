---
- name: Install packages for ssh and gpg key management
  apt:
    pkg: "{{ item }}"
    state: latest
    update_cache: yes
    cache_valid_time: "{{ aptcachetime }}"
  with_items:
    - keychain  # gpg and ssh key management
    - expect    # ssh add-key without prompts private key to keychain
    - rng-tools # fix entropy issue with gpg
  become: true


- name: Creating SSH key for current user
  user:
    name: "{{ ansible_env.USER }}"
    generate_ssh_key: yes
    ssh_key_bits: "{{ key_length }}"
    ssh_key_file: .ssh/id_rsa
    ssh_key_passphrase: "{{ ssh_password }}"
    ssh_key_comment: "{{ email }}"
  no_log: true


# https://superuser.com/questions/1003403/how-to-use-gpg-gen-key-in-a-script
- name: Create gpgdetails file
  template:
    src: ".gpgdetails"
    dest: "~/.gpgdetails"
    mode: 0600
  no_log: true


- name: Generate GPG key from ~/.gpgdetails and then remove ~/.gpgdetails
  shell: gpg --batch --gen-key ~/.gpgdetails && rm ~/.gpgdetails


# Get the GPG ID and set it to the gpg_id variable
- name: Get GPG key ID
  shell: "gpg --list-keys --with-colons | awk -F: '/^pub:/ { print $5 }'"
  register: gpg_id


# https://stackoverflow.com/questions/41379083/sourcing-a-file-before-executing-commands-in-ansible
# https://unix.stackexchange.com/questions/90853/how-can-i-run-ssh-add-automatically-without-password-prompt
# https://stackoverflow.com/questions/3149367/how-to-get-expect-c-to-work-in-single-line-rather-than-script
- name: Start the ssh-agent and add the private key to ssh-agent
  shell: |
    expect -c "spawn keychain --eval id_rsa $GPG_ID; sleep 2; expect \"Enter passphrase for ~/.ssh/id_rsa:\"; send $KEY; expect \"Identity added: ~/.ssh/id_rsa (~/.ssh/id_rsa)\"; interact;"
  environment:
    KEY: "{{ gpg_password }}"
    GPG_ID: "{{ gpg_id.stdout }}"
  no_log: true


- name: Git configuration including GPG signing
  shell: |
    git config --global user.email "{{ email }}"
    git config --global user.name "{{ name }}"
    git config --global user.signingkey "{{ gpg_id.stdout }}"
    git config --global commit.gpgsign true


- name: Export the public key
  shell: "gpg --armor --export {{ email }} > ~/.gnupg/{{ gpg_id.stdout }}-public.key"


- name: Removing expect and rng-tools
  apt:
    pkg: "{{ item }}"
    purge: yes
    state: absent
  with_items:
    - expect
    - rng-tools
  become: true
